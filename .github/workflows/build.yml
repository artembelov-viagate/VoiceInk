name: Build VoiceInk

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-15

    steps:
      - name: Checkout VoiceInk
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Confirm active Xcode version
        run: |
          xcodebuild -version
          xcrun --show-sdk-path

      - name: Check code signing availability
        id: check_signing
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Skipping code signing for pull request"
            echo "should_sign=false" >> $GITHUB_OUTPUT
          elif [ -z "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" ] || [ -z "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" ]; then
            echo "Code signing secrets not available - building without signing"
            echo "should_sign=false" >> $GITHUB_OUTPUT
          else
            echo "Code signing secrets available - will sign the build"
            echo "should_sign=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup code signing
        if: steps.check_signing.outputs.should_sign == 'true'
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/apple_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$APPLE_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # List available code signing identities
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Clone and build whisper.cpp XCFramework
        run: |
          # Clone whisper.cpp in the parent directory (as expected by the Xcode project)
          cd ..
          git clone https://github.com/ggerganov/whisper.cpp.git
          cd whisper.cpp
          
          # Make the build script executable and run it
          chmod +x ./build-xcframework.sh
          ./build-xcframework.sh
          
          # Verify the framework was built
          ls -la build-apple/
          if [ ! -d "build-apple/whisper.xcframework" ]; then
            echo "❌ Failed to build whisper.xcframework"
            exit 1
          else
            echo "✅ whisper.xcframework built successfully"
          fi

      - name: Resolve Swift Package dependencies
        run: |
          xcodebuild \
            -project VoiceInk.xcodeproj \
            -resolvePackageDependencies \
            -disableAutomaticPackageResolution

      - name: Build VoiceInk app
        env:
          DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        run: |
          # Build with or without signing based on availability
          if [ "${{ steps.check_signing.outputs.should_sign }}" = "true" ]; then
            echo "Building with code signing enabled"
            xcodebuild \
              -project VoiceInk.xcodeproj \
              -scheme VoiceInk \
              -configuration Release \
              -derivedDataPath ./DerivedData \
              OTHER_CODE_SIGN_FLAGS="--options=runtime" \
              DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
              CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
              clean build
          else
            echo "Building without code signing"
            xcodebuild \
              -project VoiceInk.xcodeproj \
              -scheme VoiceInk \
              -configuration Release \
              -derivedDataPath ./DerivedData \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGN_IDENTITY="" \
              PROVISIONING_PROFILE_SPECIFIER="" \
              clean build
          fi

      - name: Locate and verify built app
        run: |
          APP_PATH="./DerivedData/Build/Products/Release/VoiceInk.app"
          if [ -d "$APP_PATH" ]; then
            echo "✅ App built successfully at: $APP_PATH"
            ls -la "$APP_PATH"
            echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
            
            # Verify code signature (only for signed builds)
            if [ "${{ steps.check_signing.outputs.should_sign }}" = "true" ]; then
              echo "Verifying code signature..."
              codesign -dv --verbose=4 "$APP_PATH"
              codesign --verify --deep --strict "$APP_PATH"
              echo "✅ Code signature verified"
            else
              echo "ℹ️ Build was not signed - skipping signature verification"
            fi
          else
            echo "❌ App not found at expected location"
            find ./DerivedData -name "VoiceInk.app" -type d || echo "No VoiceInk.app found"
            exit 1
          fi

      - name: Notarize app
        if: steps.check_signing.outputs.should_sign == 'true'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Creating archive for notarization..."
          ditto -c -k --keepParent "$APP_PATH" "VoiceInk.zip"
          
          echo "Submitting for notarization..."
          xcrun notarytool submit "VoiceInk.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          echo "Stapling notarization to app..."
          xcrun stapler staple "$APP_PATH"
          
          echo "Verifying notarization..."
          xcrun stapler validate "$APP_PATH"
          echo "✅ Notarization completed successfully"

      - name: Package into DMG
        run: |
          mkdir -p dmg-staging
          cp -R "$APP_PATH" dmg-staging/
          
          # Create DMG
          hdiutil create -volname "VoiceInk" \
                         -srcfolder dmg-staging \
                         -ov \
                         -format UDZO \
                         VoiceInk.dmg
          
          # Sign DMG (only for signed builds)
          if [ "${{ steps.check_signing.outputs.should_sign }}" = "true" ]; then
            echo "Signing DMG..."
            codesign --sign "${{ secrets.CODE_SIGN_IDENTITY }}" \
                     --options=runtime \
                     --verbose \
                     VoiceInk.dmg
            
            echo "Verifying DMG signature..."
            codesign -dv --verbose=4 VoiceInk.dmg
            codesign --verify --deep --strict VoiceInk.dmg
          else
            echo "ℹ️ DMG was not signed - users will see security warnings"
          fi
          
          # Verify DMG was created
          if [ -f "VoiceInk.dmg" ]; then
            echo "✅ DMG created successfully"
            ls -lh VoiceInk.dmg
          else
            echo "❌ Failed to create DMG"
            exit 1
          fi

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: VoiceInk-macOS-${{ github.sha }}
          path: VoiceInk.dmg

      - name: Clean up keychain
        if: always() && steps.check_signing.outputs.should_sign == 'true'
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.sha }}
          path: |
            ./DerivedData/Logs/
            xcodebuild.log
          if-no-files-found: ignore
